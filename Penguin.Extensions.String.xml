<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Extensions.String</name>
    </assembly>
    <members>
        <member name="M:Penguin.Extensions.String.Compatibility.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Adds the ability to call IsNullOrWhiteSpace as an extension
            </summary>
            <param name="value">The value to check</param>
            <returns>A bool representing the return of String.IsNullOrWhitespace(value)</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Html.StringExtensions.GetElementsWithAttributeValue(System.String,System.String,System.String)">
            <summary>
            Returns a list of strings representing HTML elements with a certain attribute value
            </summary>
            <param name="input">The HTML string to search</param>
            <param name="attr">The Attribute to search for</param>
            <param name="value">The value of the attribute to be searched for</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.Html.StringExtensions.GetFirstAttribute(System.String,System.String)">
            <summary>
            Returns the first matching HTML attribute value in the source string
            </summary>
            <param name="input">The HTML string to search</param>
            <param name="attr">The Attribute to search for</param>
            <returns>The value of the attribute being searched for</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Html.StringExtensions.GetUnclosedElements(System.String,System.String)">
            <summary>
            Attempts to find HTML elements that are not properly closed, for validation
            </summary>
            <param name="input">The input string to search</param>
            <param name="element">The element to search for</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.Html.StringExtensions.InnerHtml(System.String)">
            <summary>
            Returns the InnerHtml of the element (text between &gt; and lt;)
            </summary>
            <param name="input">The HTML string representing the element</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.Security.SecureStringExtensions.ToInsecureString(System.Security.SecureString)">
            <summary>
            Converts a SecureString to a String
            </summary>
            <param name="instr">The SecureString to convert</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.Security.SecureStringExtensions.ValueEquals(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Tests two SecureStrings for equality
            </summary>
            <param name="a">The first string to compare</param>
            <param name="b">The second string to compare</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.Security.StringExtensions.ComputeSha256Hash(System.String)">
            <summary>
            Computes an SHA256 hash
            </summary>
            <param name="input">The string to hash</param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Security.StringExtensions.ComputeSha1Hash(System.String)">
            <summary>
            Computes an SHA1 hash
            </summary>
            <param name="input">The string to hash</param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Security.StringExtensions.SHA512(System.String,System.Byte[])">
            <summary>
            Generates a salted MD5 hash of the string
            </summary>
            <param name="plainText">The input string</param>
            <param name="saltBytes">Optional bytes to override the default salt</param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Security.StringExtensions.ComputeSha512Hash(System.String,System.Byte[])">
            <summary>
            Generates a salted MD5 hash of the string
            </summary>
            <param name="input">The input string</param>
            <param name="saltBytes">Optional bytes to override the default salt</param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.ToNumeric(System.String)">
            <summary>
            Strips non-numeric characters from a string
            </summary>
            <param name="input">The original value</param>
            <returns>The value without non-numeric characters</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.AllIndexesOf(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a list of indexes for the specified string
            </summary>
            <param name="str">The source string</param>
            <param name="value">The string to find</param>
            <param name="comparisonType">The comparison type to pass into the index function</param>
            <returns>A list of indexes where the value is found</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if the parent string contains the substring, with optional case inequality
            </summary>
            <param name="s">The source string</param>
            <param name="search">The substring to search for</param>
            <param name="comparisonType">The comparison type to pass into the index function</param>
            <returns>A value indicating if the substring was found</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.Enclose(System.String,System.String,System.Boolean)">
            <summary>
            Finds a substring between two anchor characters. Allows for nested
            </summary>
            <param name="input">The string to search</param>
            <param name="openingclosing">The opening and closing character</param>
            <param name="inclusive">Bool indicating whether or not the returned string should include the enclosing characters</param>
            <returns>The substring between the nested characters</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.Enclose(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds a substring between two anchor characters. Allows for nested
            </summary>
            <param name="input">The string to search</param>
            <param name="opening">The opening character</param>
            <param name="closing">The closing character</param>
            <param name="inclusive"></param>
            <returns>The substring between the nested characters</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.TrimLines(System.String)">
            <summary>
            Splits a string on \r and \n\ (individually) and returns any "lines" in trimmed form, that are not null or whitespace
            </summary>
            <param name="s">The string to split</param>
            <returns>Any trimmed lines that are not null or whitespace</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.Remove(System.String,System.String)">
            <summary>
            Removes all instances of the specified string, from the source (using Replace)
            </summary>
            <param name="input">The source string</param>
            <param name="toRemove">The substring to remove</param>
            <returns>The source string without any instances of the specified substring</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replaces a character at the specified index with another character
            </summary>
            <param name="input">The source string</param>
            <param name="index">The index at which to replace the character</param>
            <param name="newChar">The new character to insert</param>
            <returns>A new string with the character replaced</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.ToAlphaNumeric(System.String)">
            <summary>
            Strips non-alphanumeric characters from the string
            </summary>
            <param name="str">The source string</param>
            <returns>The source string in AlphaNumeric</returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to Base64 encoding
            </summary>
            <param name="input">the string to convert</param>
            <param name="encoding">Optional Encoding. UTF8 default</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts a string from Base64 encoding
            </summary>
            <param name="input">the string to convert</param>
            <param name="encoding">Optional Encoding. UTF8 default</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.String.StringExtensions.ToInt(System.String)">
            <summary>
            Parses a string to its Int value by stripping out invalid characters
            </summary>
            <param name="input">The input string to parse</param>
            <returns>An integer representing the string value, or 0 if empty</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Validation.StringExtensions.IsValidEmail(System.String)">
            <summary>
            Attempts to validate whether or not a string represents a valid email address
            </summary>
            <param name="str">The string to validate</param>
            <returns>A bool representing whether or not the email is valid</returns>
        </member>
        <member name="M:Penguin.Extensions.String.Validation.StringExtensions.IsValidUrl(System.String)">
            <summary>
            Attempts to validate whether or not a string represents a valid Url
            </summary>
            <param name="toTest">The string to validate</param>
            <returns>A bool representing whether or not the Url is valid</returns>
        </member>
    </members>
</doc>
